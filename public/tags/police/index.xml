<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Police | Academic</title>
    <link>/tags/police/</link>
      <atom:link href="/tags/police/index.xml" rel="self" type="application/rss+xml" />
    <description>Police</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 09 Apr 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=true) shape:circle]</url>
      <title>Police</title>
      <link>/tags/police/</link>
    </image>
    
    <item>
      <title>Pivot tables in R - looking at police data</title>
      <link>/tutorial/datajournalism/pivot-tables-in-r-looking-at-police-data/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate>
      <guid>/tutorial/datajournalism/pivot-tables-in-r-looking-at-police-data/</guid>
      <description>&lt;h1 id=&#34;looking-at-police-data-using-tidyverse-tools&#34;&gt;Looking at police data using Tidyverse tools&lt;/h1&gt;
&lt;p&gt;The Tidyverse tools are one of my favourite things and made my R coding experience much simpler. Most of the things I&amp;rsquo;ll be posting will use them in one way or another.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re going to find out what happens when someone reports a stolen bicycle - a friend seems to believe the police do nothing, so let&amp;rsquo;s investigate what actually happens.&lt;/p&gt;
&lt;h2 id=&#34;downloading-the-data&#34;&gt;Downloading the data&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve downloaded a month&amp;rsquo;s worth of data for South Wales Police from 
&lt;a href=&#34;https://data.police.uk/data/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;data.police.uk&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m going to do the R equivalent of a pivot table, grouping information together and then analysing it.&lt;/p&gt;
&lt;h2 id=&#34;getting-started&#34;&gt;Getting started&lt;/h2&gt;
&lt;p&gt;Open RStudio and go to &lt;strong&gt;FILE &amp;gt; NEW PROJECT&lt;/strong&gt; then create it in a new folder. This will give you a chance to choose where you want it to go. I tend to have a project folder and then each individual project is stored inside that.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll leave RStudio for a second and head into the computer&amp;rsquo;s file manager to find the folder we just created in RStudio. Inside that I always create a folder called data, I&amp;rsquo;ll then put my downloaded data inside it.&lt;/p&gt;
&lt;h2 id=&#34;create-a-script&#34;&gt;Create a script&lt;/h2&gt;
&lt;p&gt;Back inside RStudio, I&amp;rsquo;m going to go to &lt;strong&gt;File menu &amp;gt; New File &amp;gt; R Script&lt;/strong&gt;. I&amp;rsquo;m doing this as it allows me to repeat this analysis when I want to. You&amp;rsquo;ll want to give it a name that makes sense and then save it. R files have a &lt;strong&gt;.R&lt;/strong&gt; file extension at the end.&lt;/p&gt;
&lt;h2 id=&#34;installing-your-first-r-package&#34;&gt;Installing your first R Package&lt;/h2&gt;
&lt;p&gt;A package is a tool, or group of tools, that someone has created to cut out some of the repetition in R. We&amp;rsquo;ll be using the tidyverse by Hadley Wickham. These are a set of really helpful data tools that also make R programming easier to read.&lt;/p&gt;
&lt;p&gt;We can install packages by going to the &lt;strong&gt;Tools menu &amp;gt; Install Packages&lt;/strong&gt; and type the name into the pop-up box.&lt;/p&gt;
&lt;p&gt;Or I can write the command (known as a function) into my script, highlight my line of code and hit the &lt;strong&gt;RUN&lt;/strong&gt; button at the top of the script. The other way to do it is a line of code - &lt;code&gt;install.packages(&amp;quot;tidyverse&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I then need to load it in my script. This is done by the &lt;code&gt;library()&lt;/code&gt; function. Again, run the line of code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidyverse)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;loading-data&#34;&gt;Loading data&lt;/h2&gt;
&lt;p&gt;Even though we have the data set in our R project folder we need to load it up.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m going to use &lt;code&gt;read_csv()&lt;/code&gt; from readr to read a CSV file into our RStudio environment.&lt;/p&gt;
&lt;p&gt;If you ever want to know how what a package or function does then type &lt;code&gt;?function_name&lt;/code&gt; in the console eg &lt;code&gt;?read_csv&lt;/code&gt;, and you&amp;rsquo;ll get a help message.&lt;/p&gt;
&lt;p&gt;Our function wrapping works like this &lt;code&gt;read_csv()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We need to put the address (** aka file path**) for our CSV inside quote marks inside the inner pair of brackets.
It will look like this - &lt;code&gt;read_csv(&amp;quot;file_path&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The full syntax (not the working code I want to use) looks like this:
&lt;code&gt;data_frame_name &amp;lt;- read_csv(&amp;quot;file_path&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;&amp;lt;-&lt;/strong&gt; is an assignment symbol, I tend to think of it as a hosepipe which allows the function to pour into the name we give our data frame.&lt;/p&gt;
&lt;p&gt;My file path in the example below says &lt;strong&gt;./&lt;/strong&gt; inside the folder we are currently in is a folder called &lt;strong&gt;data&lt;/strong&gt; and &lt;strong&gt;/&lt;/strong&gt; inside that is a csv file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;crimes &amp;lt;- read_csv(&amp;quot;./data/2019-01-south-wales-street.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   `Crime ID` = col_character(),
##   Month = col_character(),
##   `Reported by` = col_character(),
##   `Falls within` = col_character(),
##   Longitude = col_double(),
##   Latitude = col_double(),
##   Location = col_character(),
##   `LSOA code` = col_character(),
##   `LSOA name` = col_character(),
##   `Crime type` = col_character(),
##   `Last outcome category` = col_character(),
##   Context = col_logical()
## )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output for this will show us what types of columns we have - in this case &lt;code&gt;col_character()&lt;/code&gt; means text and &lt;code&gt;col_double()&lt;/code&gt; means a number format. All good so far.&lt;/p&gt;
&lt;h2 id=&#34;filtering-with-dplyr&#34;&gt;Filtering with dplyr&lt;/h2&gt;
&lt;p&gt;I want to filter the information so it just includes bicycle thefts. I&amp;rsquo;m going to use some dplyr package tricks to do this.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m going to store it in a new data frame called &lt;strong&gt;bikes&lt;/strong&gt;. We&amp;rsquo;ll be using the crimes data frame we made earlier and then filtering it, before assigning the new information to bikes. So &lt;code&gt;bikes &amp;lt;- crimes&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The next bit of the code is &lt;code&gt;%&amp;gt;%&lt;/code&gt; a pipe - essentially you can say &lt;strong&gt;and then&lt;/strong&gt; to yourself when you write it. Our next function is a filter(), it does a similar job to the Excel function.&lt;/p&gt;
&lt;p&gt;Most functions will need you to say which data frame you are working on and then what you want to do. So we could say &lt;code&gt;filter(data_frame, column_name == &amp;quot;text we want back&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But dplyr knows we are working on the data frame before the first &lt;code&gt;%&amp;gt;%&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bikes &amp;lt;- crimes %&amp;gt;%
  filter(`Crime type` == &amp;quot;Bicycle theft&amp;quot;) 

# If I use the dataframe name on its own and run that line I can see what is in it
bikes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 126 x 12
##    `Crime ID` Month `Reported by` `Falls within` Longitude Latitude Location
##    &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;              &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   
##  1 0fad86217… 2019… South Wales … South Wales P…     -3.54     51.5 On or n…
##  2 5ea5f1bb3… 2019… South Wales … South Wales P…     -3.19     51.5 On or n…
##  3 ab5c7a5c7… 2019… South Wales … South Wales P…     -3.12     51.5 On or n…
##  4 44e702929… 2019… South Wales … South Wales P…     -3.23     51.5 On or n…
##  5 979ee8076… 2019… South Wales … South Wales P…     -3.09     51.5 On or n…
##  6 34490753e… 2019… South Wales … South Wales P…     -3.12     51.5 On or n…
##  7 59c9863ef… 2019… South Wales … South Wales P…     -3.12     51.5 On or n…
##  8 7029c550b… 2019… South Wales … South Wales P…     -3.22     51.5 On or n…
##  9 f8f063bad… 2019… South Wales … South Wales P…     -3.22     51.5 On or n…
## 10 cdd878455… 2019… South Wales … South Wales P…     -3.20     51.5 On or n…
## # … with 116 more rows, and 5 more variables: `LSOA code` &amp;lt;chr&amp;gt;, `LSOA
## #   name` &amp;lt;chr&amp;gt;, `Crime type` &amp;lt;chr&amp;gt;, `Last outcome category` &amp;lt;chr&amp;gt;,
## #   Context &amp;lt;lgl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output will show us how many rows (observations) and columns (variables) there are - in this case a 126 x 12. We can start adding some more analysis now.&lt;/p&gt;
&lt;h2 id=&#34;filtering-and-renaming-for-speed&#34;&gt;Filtering and renaming for speed&lt;/h2&gt;
&lt;p&gt;You may notice when we printed the data frame that some of the column names have backticks around them. That&amp;rsquo;s because they&amp;rsquo;ve got a space between the words and R is trying to help out. So, if we wanted to work with our Crime ID column we&amp;rsquo;d actually have to type &lt;code&gt;Crime ID&lt;/code&gt; with the back ticks.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m too lazy for things like that. I&amp;rsquo;d rather change the name so I can write something easier. We&amp;rsquo;re going to use &lt;code&gt;rename()&lt;/code&gt; to do it. We will tell &lt;code&gt;rename()&lt;/code&gt; that our &lt;code&gt;&amp;quot;new column name&amp;quot; = &amp;quot;old column name&amp;quot;&lt;/code&gt;  - but make sure you put the quote marks around the names when you do this.&lt;/p&gt;
&lt;p&gt;So, I&amp;rsquo;m going to tweak my code from before. I&amp;rsquo;m going to change the name of the &lt;code&gt;Last outcome category&lt;/code&gt; and the &lt;code&gt;Crime type&lt;/code&gt; columns. I&amp;rsquo;m going to change them to Outcome and Crimes - much shorter to type.&lt;/p&gt;
&lt;p&gt;So, we&amp;rsquo;re telling dplyr to take the &lt;strong&gt;crimes&lt;/strong&gt; data frame &lt;strong&gt;and then&lt;/strong&gt; rename by assigning the new name to the old name. (The comma means we can do more than one rename at once, to do more just add a comma and then say &amp;ldquo;new&amp;rdquo; = &amp;ldquo;old&amp;rdquo; again.) &lt;strong&gt;And then&lt;/strong&gt; filter our newly-named &lt;strong&gt;Crimes&lt;/strong&gt; column and look for the text inside the quote marks.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bikes &amp;lt;- crimes %&amp;gt;%
  rename(&amp;quot;Outcome&amp;quot; = &amp;quot;Last outcome category&amp;quot;, &amp;quot;Crimes&amp;quot; = &amp;quot;Crime type&amp;quot;) %&amp;gt;%
  filter(Crimes == &amp;quot;Bicycle theft&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;doing-a-pivot-table-in-dplyr-syntax&#34;&gt;Doing a pivot table in dplyr syntax&lt;/h2&gt;
&lt;p&gt;Now we can do some digging. I want to know what the police have done about the reported bike thefts.&lt;/p&gt;
&lt;p&gt;We can group things together by our Outcome category and count how often each of the outcomes happen. So, we tell &lt;code&gt;group_by()&lt;/code&gt; which column we want to work on. &lt;strong&gt;And then&lt;/strong&gt; we tell it what to count - in this case it creates a column called outcome_count and uses the &lt;code&gt;n()&lt;/code&gt; function to count the Outcome.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bikes &amp;lt;- crimes %&amp;gt;%
  rename(&amp;quot;Outcome&amp;quot; = &amp;quot;Last outcome category&amp;quot;, &amp;quot;Crimes&amp;quot; = &amp;quot;Crime type&amp;quot;) %&amp;gt;%
  filter(Crimes == &amp;quot;Bicycle theft&amp;quot;) %&amp;gt;%
  group_by(Outcome) %&amp;gt;%
  summarise(outcome_count = n())

# Again I&#39;ll type the dataframe name here and run this line to see what we have got.
bikes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 2
##   Outcome                                       outcome_count
##   &amp;lt;chr&amp;gt;                                                 &amp;lt;int&amp;gt;
## 1 Awaiting court outcome                                    1
## 2 Investigation complete; no suspect identified            88
## 3 Unable to prosecute suspect                               1
## 4 Under investigation                                      36
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;rsquo;ve got a pivot table - it has grouped the &lt;strong&gt;Outcome column&lt;/strong&gt; and counted how often each one occurs.&lt;/p&gt;
&lt;h2 id=&#34;tldr-investigation-complete-no-suspect-identified--no-suspect-identified&#34;&gt;TLDR: &amp;ldquo;Investigation complete; no suspect identified&amp;rdquo; = &amp;ldquo;No suspect identified&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re going to change an element by using the &lt;code&gt;mutate()&lt;/code&gt; function - we&amp;rsquo;re going to &lt;code&gt;recode()&lt;/code&gt; one of our Outcome categories to shorten it. The code would look like this - &lt;code&gt;mutate(Outcome = recode(Outcome, &amp;quot;Investigation complete; no suspect identified&amp;quot; = &amp;quot;No suspect identified&amp;quot;))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;But I&amp;rsquo;d like to order it in descending order - so we can do one more &lt;strong&gt;and then&lt;/strong&gt; &lt;code&gt;%&amp;gt;%&lt;/code&gt; at the end of our code. We will &lt;code&gt;arrange()&lt;/code&gt; our &lt;strong&gt;outcome_count&lt;/strong&gt; in &lt;code&gt;desc()&lt;/code&gt; - descending order. You must put &lt;code&gt;desc()&lt;/code&gt; inside the &lt;code&gt;arrange()&lt;/code&gt; function. And check your brackets.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bikes &amp;lt;- crimes %&amp;gt;%
  rename(&amp;quot;Outcome&amp;quot; = &amp;quot;Last outcome category&amp;quot;, &amp;quot;Crimes&amp;quot; = &amp;quot;Crime type&amp;quot;) %&amp;gt;%
  filter(Crimes == &amp;quot;Bicycle theft&amp;quot;) %&amp;gt;%
  mutate(Outcome = recode(Outcome, 
                          &amp;quot;Investigation complete; no suspect identified&amp;quot; = &amp;quot;No suspect identified&amp;quot;)) %&amp;gt;%
  group_by(Outcome) %&amp;gt;%
  summarise(outcome_count = n()) %&amp;gt;%
  arrange(desc(outcome_count))

# Again I&#39;ll type the dataframe name here and run this line to see what we have got.
bikes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 2
##   Outcome                     outcome_count
##   &amp;lt;chr&amp;gt;                               &amp;lt;int&amp;gt;
## 1 No suspect identified                  88
## 2 Under investigation                    36
## 3 Awaiting court outcome                  1
## 4 Unable to prosecute suspect             1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we&amp;rsquo;ve got it. A pivot table that tells us what has happened to the bike crimes in the original data set and has put them in descending order.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
