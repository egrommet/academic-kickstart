<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Glyn Mottershead on Glyn Mottershead</title>
    <link>https://www.glynmottershead.com/</link>
    <description>Recent content in Glyn Mottershead on Glyn Mottershead</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 09 Jul 2019 14:00:00 +0100</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bridging the Skills Gap: Innovation in Journalism Education</title>
      <link>https://www.glynmottershead.com/talk/wjec-paris/</link>
      <pubDate>Tue, 09 Jul 2019 14:00:00 +0100</pubDate>
      
      <guid>https://www.glynmottershead.com/talk/wjec-paris/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Data Journalism in Malaga</title>
      <link>https://www.glynmottershead.com/post/2019-07-05-data-journalism-in-malaga/data-journalism-in-malaga/</link>
      <pubDate>Fri, 05 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.glynmottershead.com/post/2019-07-05-data-journalism-in-malaga/data-journalism-in-malaga/</guid>
      <description>


&lt;p&gt;I’ve just got back from the &lt;a href=&#34;http://datajconf.com&#34;&gt;third European Data and Computational Journalism Conference&lt;/a&gt; in Malaga, Spain, and thought I’d share a few thoughts about the event.&lt;/p&gt;
&lt;p&gt;This is the third time the I’ve helped organise this conference, along with my co-chairs Martin Chorley (Cardiff University) and Bahareh Heravi (University College Dublin), and the first one I’ve done since moving to City, University of London.&lt;/p&gt;
&lt;p&gt;More than 100 people took part in the two days, with participants coming from 14 countries. There was a lively mix of academic presentations, industry talks and practical workshops across the event. The days were split at the University of Malaga’s grand Rectory Building on the first day and then the campus just outside of town on the second.&lt;/p&gt;
&lt;div id=&#34;why-malaga&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why Malaga?&lt;/h2&gt;
&lt;p&gt;That’s because of a joke by the wonderful Mar Cabra, the closing keynote from the second conference in Cardiff. She was taking a sabbatical after the &lt;a href=&#34;https://gijn.org/2017/12/04/paradise-papers/&#34;&gt;Panama Papers&lt;/a&gt; and suggested we should all join her in Malaga in 2019 - the joke turned into reality due to the hard work of the wonderful &lt;a href=&#34;https://www.uma.es/cms/base/redireccion_publica/microsite/microsite/48953/&#34;&gt;University of Malaga&lt;/a&gt; team led by &lt;a href=&#34;https://www.uma.es/departamento-de-periodismo/info/73080/perfil-bella-palomo/&#34;&gt;Bella Palomo&lt;/a&gt; with the support of her colleagues and students. Spanish hospitality was the order of the day, and to say that the attendees were looked after magnificently is an understatement.&lt;/p&gt;
&lt;p&gt;But the point of the conference was much more than the beautiful surroundings, excellent food and a chance to catch up with colleagues old and new.&lt;/p&gt;
&lt;p&gt;It’s all about making sure journalists, academics, start-ups and early-career researchers and students can network with people from across the continent.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-outside-of-the-ukus-traditions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting outside of the UK/US traditions&lt;/h2&gt;
&lt;p&gt;It has been quite revelation getting outside the traditions of the UK and US media organisations - although we had great presentations from people who represent both.&lt;/p&gt;
&lt;p&gt;One of the sessions on day two was specifically focussed on data journalism in the Iberian peninsula, which was a real masterclass in how data and computational techniques can be used locally.&lt;/p&gt;
&lt;p&gt;And this has always been one of the interesting highlights for me - how people solve problems in their backyard, really getting to grips with issues that affect the community.&lt;/p&gt;
&lt;p&gt;As well as our keynotes Daniele Grasso from El Pais and Meredith Broussard from New York University, our roster featured representatives from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Al Jazeera&lt;/li&gt;
&lt;li&gt;BBC World Service&lt;/li&gt;
&lt;li&gt;University of Bergen&lt;/li&gt;
&lt;li&gt;University of Malaga&lt;/li&gt;
&lt;li&gt;University of Girona&lt;/li&gt;
&lt;li&gt;University of Santiago de Compostela&lt;/li&gt;
&lt;li&gt;Manchester Metropolitan University&lt;/li&gt;
&lt;li&gt;University of Salamanca&lt;/li&gt;
&lt;li&gt;University Rey Jun Carlos&lt;/li&gt;
&lt;li&gt;The UK’s Office for National Statistics&lt;/li&gt;
&lt;li&gt;LMU Munich&lt;/li&gt;
&lt;li&gt;Google News Intiative - who kindly supported the event&lt;/li&gt;
&lt;li&gt;El Confidencial&lt;/li&gt;
&lt;li&gt;Datadista&lt;/li&gt;
&lt;li&gt;University of Beira Interior / Labcom.IFP&lt;/li&gt;
&lt;li&gt;The Times and Sunday Times (UK)&lt;/li&gt;
&lt;li&gt;Sky News&lt;/li&gt;
&lt;li&gt;BBC Shared Data Unit&lt;/li&gt;
&lt;li&gt;NZZ Switzerland&lt;/li&gt;
&lt;li&gt;Newtral - who aslo kindly sponsored the event&lt;/li&gt;
&lt;li&gt;University of Missouri&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In short, a pretty impressive line-up of people sharing ideas and thoughts about journalism, working with data and engaging with our communities - both inside and outside the newsroom.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;where-next&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Where next?&lt;/h2&gt;
&lt;p&gt;The conference is peripatetic - so we move around. Year one was Dublin, year two Cardiff. If you are interested in hosting the conference next year then get in touch.&lt;/p&gt;
&lt;p&gt;And just in case you are wondering if it was worth coming along next time, or supporting the conference in any way then watch the video made by the &lt;a href=&#34;https://twitter.com/JonSedano/&#34;&gt;Jon Sendano&lt;/a&gt;. The event is always interesting and entertaining - and worth coming along to, by submitting a proposal for a talk or just coming to listen.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=WAls1xTwFS0&#34; title=&#34;European Data and Computational Journalism Conference, Malaga&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/WAls1xTwFS0/0.jpg&#34; alt=&#34;European Data and Computational Journalism Conference, Malaga&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;mil-gracias&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Mil gracias&lt;/h1&gt;
&lt;p&gt;All that’s left to say is a huge muchas gracias to my co-chairs, the local organising committee (who were absolutely amazing and put in loads of hard work), and the attendees for making this even such a great success.&lt;/p&gt;
&lt;p&gt;Oh, and go visit Malaga if you haven’t already - it’s beautiful.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Hex Mapping</title>
      <link>https://www.glynmottershead.com/tutorial/hex-mapping/</link>
      <pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.glynmottershead.com/tutorial/hex-mapping/</guid>
      <description>

&lt;h1 id=&#34;mapping-and-convenient-lies&#34;&gt;Mapping and convenient lies&lt;/h1&gt;

&lt;h2 id=&#34;size-isn-t-everything&#34;&gt;Size isn&amp;rsquo;t everything&lt;/h2&gt;

&lt;p&gt;When thinking about maps, it is important to understand what we are trying to show. In the last tutorial&lt;/p&gt;

&lt;p&gt;&amp;ldquo;The largest constituency is Ross, Skye and Lochaber.  It measures approximately 12,000 square kilometres. The smallest constituency is Islington North at 7.35 square kilometres.&amp;rdquo; [From the UK Parliament site](&amp;ldquo;&lt;a href=&#34;https://www.parliament.uk/about/how/elections-and-voting/constituencies/#jump-link-2&amp;quot;&#34;&gt;https://www.parliament.uk/about/how/elections-and-voting/constituencies/#jump-link-2&amp;quot;&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pivot tables in R - looking at police data</title>
      <link>https://www.glynmottershead.com/tutorial/pivot-tables-in-r-looking-at-police-data/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.glynmottershead.com/tutorial/pivot-tables-in-r-looking-at-police-data/</guid>
      <description>

&lt;h1 id=&#34;looking-at-police-data-using-tidyverse-tools&#34;&gt;Looking at police data using Tidyverse tools&lt;/h1&gt;

&lt;p&gt;The Tidyverse tools are one of my favourite things and made my R coding experience much simpler. Most of the things I&amp;rsquo;ll be posting will use them in one way or another.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re going to find out what happens when someone reports a stolen bicycle - a friend seems to believe the police do nothing, so let&amp;rsquo;s investigate what actually happens.&lt;/p&gt;

&lt;h2 id=&#34;downloading-the-data&#34;&gt;Downloading the data&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve downloaded a month&amp;rsquo;s worth of data for South Wales Police from &lt;a href=&#34;https://data.police.uk/data/&#34;&gt;data.police.uk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to do the R equivalent of a pivot table, grouping information together and then analysing it.&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;Open RStudio and go to &lt;strong&gt;FILE &amp;gt; NEW PROJECT&lt;/strong&gt; then create it in a new folder. This will give you a chance to choose where you want it to go. I tend to have a project folder and then each individual project is stored inside that.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll leave RStudio for a second and head into the computer&amp;rsquo;s file manager to find the folder we just created in RStudio. Inside that I always create a folder called data, I&amp;rsquo;ll then put my downloaded data inside it.&lt;/p&gt;

&lt;h2 id=&#34;create-a-script&#34;&gt;Create a script&lt;/h2&gt;

&lt;p&gt;Back inside RStudio, I&amp;rsquo;m going to go to &lt;strong&gt;File menu &amp;gt; New File &amp;gt; R Script&lt;/strong&gt;. I&amp;rsquo;m doing this as it allows me to repeat this analysis when I want to. You&amp;rsquo;ll want to give it a name that makes sense and then save it. R files have a &lt;strong&gt;.R&lt;/strong&gt; file extension at the end.&lt;/p&gt;

&lt;h2 id=&#34;installing-your-first-r-package&#34;&gt;Installing your first R Package&lt;/h2&gt;

&lt;p&gt;A package is a tool, or group of tools, that someone has created to cut out some of the repetition in R. We&amp;rsquo;ll be using the tidyverse by Hadley Wickham. These are a set of really helpful data tools that also make R programming easier to read.&lt;/p&gt;

&lt;p&gt;We can install packages by going to the &lt;strong&gt;Tools menu &amp;gt; Install Packages&lt;/strong&gt; and type the name into the pop-up box.&lt;/p&gt;

&lt;p&gt;Or I can write the command (known as a function) into my script, highlight my line of code and hit the &lt;strong&gt;RUN&lt;/strong&gt; button at the top of the script. The other way to do it is a line of code - &lt;code&gt;install.packages(&amp;quot;tidyverse&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I then need to load it in my script. This is done by the &lt;code&gt;library()&lt;/code&gt; function. Again, run the line of code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidyverse)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;loading-data&#34;&gt;Loading data&lt;/h2&gt;

&lt;p&gt;Even though we have the data set in our R project folder we need to load it up.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to use &lt;code&gt;read_csv()&lt;/code&gt; from readr to read a CSV file into our RStudio environment.&lt;/p&gt;

&lt;p&gt;If you ever want to know how what a package or function does then type &lt;code&gt;?function_name&lt;/code&gt; in the console eg &lt;code&gt;?read_csv&lt;/code&gt;, and you&amp;rsquo;ll get a help message.&lt;/p&gt;

&lt;p&gt;Our function wrapping works like this &lt;code&gt;read_csv()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We need to put the address (** aka file path**) for our CSV inside quote marks inside the inner pair of brackets.
It will look like this - &lt;code&gt;read_csv(&amp;quot;file_path&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The full syntax (not the working code I want to use) looks like this:
&lt;code&gt;data_frame_name &amp;lt;- read_csv(&amp;quot;file_path&amp;quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&amp;lt;-&lt;/strong&gt; is an assignment symbol, I tend to think of it as a hosepipe which allows the function to pour into the name we give our data frame.&lt;/p&gt;

&lt;p&gt;My file path in the example below says &lt;strong&gt;./&lt;/strong&gt; inside the folder we are currently in is a folder called &lt;strong&gt;data&lt;/strong&gt; and &lt;strong&gt;/&lt;/strong&gt; inside that is a csv file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;crimes &amp;lt;- read_csv(&amp;quot;./data/2019-01-south-wales-street.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   `Crime ID` = col_character(),
##   Month = col_character(),
##   `Reported by` = col_character(),
##   `Falls within` = col_character(),
##   Longitude = col_double(),
##   Latitude = col_double(),
##   Location = col_character(),
##   `LSOA code` = col_character(),
##   `LSOA name` = col_character(),
##   `Crime type` = col_character(),
##   `Last outcome category` = col_character(),
##   Context = col_logical()
## )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output for this will show us what types of columns we have - in this case &lt;code&gt;col_character()&lt;/code&gt; means text and &lt;code&gt;col_double()&lt;/code&gt; means a number format. All good so far.&lt;/p&gt;

&lt;h2 id=&#34;filtering-with-dplyr&#34;&gt;Filtering with dplyr&lt;/h2&gt;

&lt;p&gt;I want to filter the information so it just includes bicycle thefts. I&amp;rsquo;m going to use some dplyr package tricks to do this.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to store it in a new data frame called &lt;strong&gt;bikes&lt;/strong&gt;. We&amp;rsquo;ll be using the crimes data frame we made earlier and then filtering it, before assigning the new information to bikes. So &lt;code&gt;bikes &amp;lt;- crimes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The next bit of the code is &lt;code&gt;%&amp;gt;%&lt;/code&gt; a pipe - essentially you can say &lt;strong&gt;and then&lt;/strong&gt; to yourself when you write it. Our next function is a filter(), it does a similar job to the Excel function.&lt;/p&gt;

&lt;p&gt;Most functions will need you to say which data frame you are working on and then what you want to do. So we could say &lt;code&gt;filter(data_frame, column_name == &amp;quot;text we want back&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But dplyr knows we are working on the data frame before the first &lt;code&gt;%&amp;gt;%&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bikes &amp;lt;- crimes %&amp;gt;%
  filter(`Crime type` == &amp;quot;Bicycle theft&amp;quot;) 

# If I use the dataframe name on its own and run that line I can see what is in it
bikes
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 126 x 12
##    `Crime ID` Month `Reported by` `Falls within` Longitude Latitude
##    &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;              &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 0fad86217… 2019… South Wales … South Wales P…     -3.54     51.5
##  2 5ea5f1bb3… 2019… South Wales … South Wales P…     -3.19     51.5
##  3 ab5c7a5c7… 2019… South Wales … South Wales P…     -3.12     51.5
##  4 44e702929… 2019… South Wales … South Wales P…     -3.23     51.5
##  5 979ee8076… 2019… South Wales … South Wales P…     -3.09     51.5
##  6 34490753e… 2019… South Wales … South Wales P…     -3.12     51.5
##  7 59c9863ef… 2019… South Wales … South Wales P…     -3.12     51.5
##  8 7029c550b… 2019… South Wales … South Wales P…     -3.22     51.5
##  9 f8f063bad… 2019… South Wales … South Wales P…     -3.22     51.5
## 10 cdd878455… 2019… South Wales … South Wales P…     -3.20     51.5
## # … with 116 more rows, and 6 more variables: Location &amp;lt;chr&amp;gt;, `LSOA
## #   code` &amp;lt;chr&amp;gt;, `LSOA name` &amp;lt;chr&amp;gt;, `Crime type` &amp;lt;chr&amp;gt;, `Last outcome
## #   category` &amp;lt;chr&amp;gt;, Context &amp;lt;lgl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output will show us how many rows (observations) and columns (variables) there are - in this case a 126 x 12. We can start adding some more analysis now.&lt;/p&gt;

&lt;h2 id=&#34;filtering-and-renaming-for-speed&#34;&gt;Filtering and renaming for speed&lt;/h2&gt;

&lt;p&gt;You may notice when we printed the data frame that some of the column names have backticks around them. That&amp;rsquo;s because they&amp;rsquo;ve got a space between the words and R is trying to help out. So, if we wanted to work with our Crime ID column we&amp;rsquo;d actually have to type &lt;code&gt;Crime ID&lt;/code&gt; with the back ticks.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m too lazy for things like that. I&amp;rsquo;d rather change the name so I can write something easier. We&amp;rsquo;re going to use &lt;code&gt;rename()&lt;/code&gt; to do it. We will tell &lt;code&gt;rename()&lt;/code&gt; that our &lt;code&gt;&amp;quot;new column name&amp;quot; = &amp;quot;old column name&amp;quot;&lt;/code&gt;  - but make sure you put the quote marks around the names when you do this.&lt;/p&gt;

&lt;p&gt;So, I&amp;rsquo;m going to tweak my code from before. I&amp;rsquo;m going to change the name of the &lt;code&gt;Last outcome category&lt;/code&gt; and the &lt;code&gt;Crime type&lt;/code&gt; columns. I&amp;rsquo;m going to change them to Outcome and Crimes - much shorter to type.&lt;/p&gt;

&lt;p&gt;So, we&amp;rsquo;re telling dplyr to take the &lt;strong&gt;crimes&lt;/strong&gt; data frame &lt;strong&gt;and then&lt;/strong&gt; rename by assigning the new name to the old name. (The comma means we can do more than one rename at once, to do more just add a comma and then say &amp;ldquo;new&amp;rdquo; = &amp;ldquo;old&amp;rdquo; again.) &lt;strong&gt;And then&lt;/strong&gt; filter our newly-named &lt;strong&gt;Crimes&lt;/strong&gt; column and look for the text inside the quote marks.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bikes &amp;lt;- crimes %&amp;gt;%
  rename(&amp;quot;Outcome&amp;quot; = &amp;quot;Last outcome category&amp;quot;, &amp;quot;Crimes&amp;quot; = &amp;quot;Crime type&amp;quot;) %&amp;gt;%
  filter(Crimes == &amp;quot;Bicycle theft&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;doing-a-pivot-table-in-dplyr-syntax&#34;&gt;Doing a pivot table in dplyr syntax&lt;/h2&gt;

&lt;p&gt;Now we can do some digging. I want to know what the police have done about the reported bike thefts.&lt;/p&gt;

&lt;p&gt;We can group things together by our Outcome category and count how often each of the outcomes happen. So, we tell &lt;code&gt;group_by()&lt;/code&gt; which column we want to work on. &lt;strong&gt;And then&lt;/strong&gt; we tell it what to count - in this case it creates a column called outcome_count and uses the &lt;code&gt;n()&lt;/code&gt; function to count the Outcome.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bikes &amp;lt;- crimes %&amp;gt;%
  rename(&amp;quot;Outcome&amp;quot; = &amp;quot;Last outcome category&amp;quot;, &amp;quot;Crimes&amp;quot; = &amp;quot;Crime type&amp;quot;) %&amp;gt;%
  filter(Crimes == &amp;quot;Bicycle theft&amp;quot;) %&amp;gt;%
  group_by(Outcome) %&amp;gt;%
  summarise(outcome_count = n())

# Again I&#39;ll type the dataframe name here and run this line to see what we have got.
bikes
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 2
##   Outcome                                       outcome_count
##   &amp;lt;chr&amp;gt;                                                 &amp;lt;int&amp;gt;
## 1 Awaiting court outcome                                    1
## 2 Investigation complete; no suspect identified            88
## 3 Unable to prosecute suspect                               1
## 4 Under investigation                                      36
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;ve got a pivot table - it has grouped the &lt;strong&gt;Outcome column&lt;/strong&gt; and counted how often each one occurs.&lt;/p&gt;

&lt;h2 id=&#34;tldr-investigation-complete-no-suspect-identified-no-suspect-identified&#34;&gt;TLDR: &amp;ldquo;Investigation complete; no suspect identified&amp;rdquo; = &amp;ldquo;No suspect identified&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re going to change an element by using the &lt;code&gt;mutate()&lt;/code&gt; function - we&amp;rsquo;re going to &lt;code&gt;recode()&lt;/code&gt; one of our Outcome categories to shorten it. The code would look like this - &lt;code&gt;mutate(Outcome = recode(Outcome, &amp;quot;Investigation complete; no suspect identified&amp;quot; = &amp;quot;No suspect identified&amp;quot;))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But I&amp;rsquo;d like to order it in descending order - so we can do one more &lt;strong&gt;and then&lt;/strong&gt; &lt;code&gt;%&amp;gt;%&lt;/code&gt; at the end of our code. We will &lt;code&gt;arrange()&lt;/code&gt; our &lt;strong&gt;outcome_count&lt;/strong&gt; in &lt;code&gt;desc()&lt;/code&gt; - descending order. You must put &lt;code&gt;desc()&lt;/code&gt; inside the &lt;code&gt;arrange()&lt;/code&gt; function. And check your brackets.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bikes &amp;lt;- crimes %&amp;gt;%
  rename(&amp;quot;Outcome&amp;quot; = &amp;quot;Last outcome category&amp;quot;, &amp;quot;Crimes&amp;quot; = &amp;quot;Crime type&amp;quot;) %&amp;gt;%
  filter(Crimes == &amp;quot;Bicycle theft&amp;quot;) %&amp;gt;%
  mutate(Outcome = recode(Outcome, 
                          &amp;quot;Investigation complete; no suspect identified&amp;quot; = &amp;quot;No suspect identified&amp;quot;)) %&amp;gt;%
  group_by(Outcome) %&amp;gt;%
  summarise(outcome_count = n()) %&amp;gt;%
  arrange(desc(outcome_count))

# Again I&#39;ll type the dataframe name here and run this line to see what we have got.
bikes
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 2
##   Outcome                     outcome_count
##   &amp;lt;chr&amp;gt;                               &amp;lt;int&amp;gt;
## 1 No suspect identified                  88
## 2 Under investigation                    36
## 3 Awaiting court outcome                  1
## 4 Unable to prosecute suspect             1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we&amp;rsquo;ve got it. A pivot table that tells us what has happened to the bike crimes in the original data set and has put them in descending order.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Data and Computational Journalism</title>
      <link>https://www.glynmottershead.com/talk/digital-city/</link>
      <pubDate>Thu, 04 Apr 2019 13:30:00 +0100</pubDate>
      
      <guid>https://www.glynmottershead.com/talk/digital-city/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Mapping the article 50 petition in R and ggplot - part 2</title>
      <link>https://www.glynmottershead.com/tutorial/mapping-the-article-50-petition-in-r-and-ggplot-part-2/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.glynmottershead.com/tutorial/mapping-the-article-50-petition-in-r-and-ggplot-part-2/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://www.glynmottershead.com/tutorial/2019-04-01-mapping-the-article-50-petition-in-r-and-ggplot-part-2_files/Plot_Zoom.png&#34; alt=&#34;The final map&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;mapping-in-r-using-ggplot2-part-two&#34;&gt;Mapping in R - using ggplot2, part two&lt;/h1&gt;

&lt;p&gt;In the previous tutorial we looked at getting data from web APIs in JSON and GeoJSON formats to create a simple map.&lt;/p&gt;

&lt;p&gt;This time we&amp;rsquo;ll be adapting code from &lt;a href=&#34;https://timogrossenbacher.ch/2016/12/beautiful-thematic-maps-with-ggplot2-only/&#34; title=&#34;Timo Grossenbacher&#39;s post on how to make beautiful plots in ggplot2&#34;&gt;Timo Grossenbacher&lt;/a&gt; to make our map more attractive.&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;We need to reload the data again, so we&amp;rsquo;re going to get a different number of signatures than last time.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to run this in one block and assume you can follow along, if not &lt;a href=&#34;https://www.glynmottershead.com/tutorial/mapping-the-article-50-petition-in-r-and-ggplot/&#34;&gt;go back to the previous post&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Load the mapping file
library(geojsonio)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &#39;geojsonio&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## The following object is masked from &#39;package:base&#39;:
## 
##     pretty
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;url &amp;lt;- &amp;quot;https://opendata.arcgis.com/datasets/5ce27b980ffb43c39b012c2ebeab92c0_2.geojson&amp;quot;
uk_map &amp;lt;- geojson_read(url, what = &amp;quot;sp&amp;quot;)

# Convert to a ggplot-friendly format
library(ggplot2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Registered S3 method overwritten by &#39;dplyr&#39;:
##   method         from     
##   print.location geojsonio
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;fort_uk_map &amp;lt;- fortify(uk_map, region = &amp;quot;pcon17cd&amp;quot;)

# Get the data from the petition site
library(jsonlite)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &#39;jsonlite&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## The following object is masked from &#39;package:geojsonio&#39;:
## 
##     validate
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;json_data &amp;lt;- fromJSON(&amp;quot;https://petition.parliament.uk/petitions/241584.json&amp;quot;, flatten = FALSE)

# Turn it into a datafram
sign_data &amp;lt;- json_data$data$attributes$signatures_by_constituency


# Store the mumber of signatures for later
total_sig &amp;lt;- sum(sign_data$signature_count)

# Join the two datasets together
library(dplyr)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &#39;dplyr&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## The following objects are masked from &#39;package:stats&#39;:
## 
##     filter, lag
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## The following objects are masked from &#39;package:base&#39;:
## 
##     intersect, setdiff, setequal, union
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;full_uk_map &amp;lt;- left_join(fort_uk_map, sign_data, by = c(&amp;quot;id&amp;quot; = &amp;quot;ons_code&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One of the things I really liked about Timo&amp;rsquo;s post is that he divided the vote count into bands (buckets) to help make it easier to see what is going on. I like the previous map but it isn&amp;rsquo;t massively easy to read. I&amp;rsquo;m not going to go into a lot on data viz theory here, but I strongly recommend you have a look at the work of &lt;a href=&#34;http://albertocairo.com/&#34; title=&#34;Dataviz guru Alberto Cairo&#39;s site&#34;&gt;Alberto Cairo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;blue-is-the-colour&#34;&gt;Blue is the colour&lt;/h2&gt;

&lt;p&gt;What I didn&amp;rsquo;t explain last time is that the default colour of our last map was blue. This time I want it to be intentional and echo the blue background of the European flag, so the deeper blues signify more Europhile constituencies.&lt;/p&gt;

&lt;p&gt;There is a problem with maps - they often just show where the population is biggest, we could go int detail about constituencies to scale it more effectively but it gives us an interesting starting point.
&lt;em&gt;&amp;ldquo;The Office for National Statistics gives the median total parliamentary electorate across constituencies of about 72,400 in England, 69,000 in Scotland, 66,800 in Northern Ireland and 56,800 in Wales.&amp;rdquo;&lt;/em&gt; &lt;a href=&#34;https://www.parliament.uk/about/how/elections-and-voting/constituencies/&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I like to use &lt;a href=&#34;http://colorbrewer2.org/#type=sequential&amp;amp;scheme=BuGn&amp;amp;n=3&#34; title=&#34;Colorbrewer for mapping&#34;&gt;colorbrewer&lt;/a&gt; when I&amp;rsquo;m working with maps, you can have a much more nuanced colour range than using R&amp;rsquo;s default (yes it can be done in R default, but I&amp;rsquo;ve personally found it to be more fiddly). And, it is also a function that is built into ggplot2 &lt;code&gt;scale_fill_brewer()&lt;/code&gt; - which will make our life easier.&lt;/p&gt;

&lt;p&gt;But this gives us a bit of a problem as our colorbrewer function call only allows us nine shades of blue. If we tried using it as it stands we&amp;rsquo;d throw an error message similar to this
&lt;code&gt;1: In brewer.pal(n, pal): n too large, allowed maximum for palette....&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So, we&amp;rsquo;ll chop our vote range into blocks as per Timo&amp;rsquo;s post, create labels that allow us to explain the blocks, colour it according to our new range and then add a them to make it look good. His post goes into a lot more detail (obviously!).&lt;/p&gt;

&lt;h3 id=&#34;there-s-a-whole-in-my-bucket&#34;&gt;There&amp;rsquo;s a whole in my bucket&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ll start off by declaring how many colour buckets we want to use, we&amp;rsquo;ll store it as a variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;no_classes &amp;lt;- 9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next thing to do is then chop our voter range into sections (we want 9), we&amp;rsquo;ll be using &lt;code&gt;quantiles()&lt;/code&gt; to do that. We&amp;rsquo;ll give our function the numbers in the signature count column of our full_uk_map. The &lt;a href=&#34;https://www.rdocumentation.org/packages/stats/versions/3.5.3/topics/quantile&#34;&gt;probs argument&lt;/a&gt; takes the number of classes and then calculates the bands for us.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;quantiles &amp;lt;- quantile(full_uk_map$signature_count, probs = seq(0, 1, length.out = no_classes + 1))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we create an empty vector for the labels for our map legend, essentially an empty box to store the next stage in.&lt;/p&gt;

&lt;p&gt;The second part uses a for loop to run through our number range and create the labels. We&amp;rsquo;ll round to the nearest whole number (as you can&amp;rsquo;t get part of a vote, but our quantiles calculation would give that).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;labels &amp;lt;- c()

for(band in 1:length(quantiles)){
  labels &amp;lt;- c(labels, paste0(round(quantiles[band]), 
                             &amp;quot; – &amp;quot;, 
                             round(quantiles[band + 1])))
}

labels
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;1988 – 3920&amp;quot;   &amp;quot;3920 – 4611&amp;quot;   &amp;quot;4611 – 5354&amp;quot;   &amp;quot;5354 – 6558&amp;quot;  
##  [5] &amp;quot;6558 – 7651&amp;quot;   &amp;quot;7651 – 9114&amp;quot;   &amp;quot;9114 – 9724&amp;quot;   &amp;quot;9724 – 11199&amp;quot; 
##  [9] &amp;quot;11199 – 37154&amp;quot; &amp;quot;37154 – NA&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we&amp;rsquo;ve got a problem - the code gives us a final band that looks like &amp;ldquo;36901 - NA&amp;rdquo;, anything over our maximum. We can easily get rid of that as obviously we are limited at the maximum.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;labels &amp;lt;- labels[1:length(labels)-1]

labels
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1988 – 3920&amp;quot;   &amp;quot;3920 – 4611&amp;quot;   &amp;quot;4611 – 5354&amp;quot;   &amp;quot;5354 – 6558&amp;quot;  
## [5] &amp;quot;6558 – 7651&amp;quot;   &amp;quot;7651 – 9114&amp;quot;   &amp;quot;9114 – 9724&amp;quot;   &amp;quot;9724 – 11199&amp;quot; 
## [9] &amp;quot;11199 – 37154&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we need to add our new number range to the map. We&amp;rsquo;ll do this with the &lt;a href=&#34;https://www.rdocumentation.org/packages/base/versions/3.5.3/topics/cut&#34;&gt;&lt;code&gt;cut()&lt;/code&gt; function&lt;/a&gt;, to turn our &lt;a href=&#34;https://www.stat.berkeley.edu/~s133/factors.html&#34;&gt;number range into a factor&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;full_uk_map$quantiles &amp;lt;- cut(full_uk_map$signature_count,
                             breaks = quantiles,
                             labels = labels,
                             include.lowest = T)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;making-the-map&#34;&gt;Making the map&lt;/h2&gt;

&lt;p&gt;Now we can make our map. This time we&amp;rsquo;ll use our new quantiles column as the fill. We&amp;rsquo;ll use &lt;code&gt;scale_fill_brewer()&lt;/code&gt; to give us our &amp;lsquo;European&amp;rsquo; blue colour range and put the legend at the bottom. we&amp;rsquo;ll use the &lt;code&gt;labs()&lt;/code&gt; element of ggplot2 to give us a headline, captions and attribution.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;by_quantile &amp;lt;- ggplot() +
  geom_polygon(data = full_uk_map, aes(x = long, y = lat, group = group, fill = quantiles)) +
  geom_path(color = &amp;quot;black&amp;quot;, size = 0.1) +
  scale_fill_brewer(type = &amp;quot;qual&amp;quot;, palette = &amp;quot;Blues&amp;quot;, guide = &amp;quot;legend&amp;quot;, name = &amp;quot;Signature\nCount&amp;quot;, labels = labels) +
  
  # I&#39;ve commmented out theme_void() so you can see what the built-in themes do
  # theme_void() +
  
  theme(legend.position = &amp;quot;bottom&amp;quot;) +
  labs(x = NULL, 
       y = NULL, 
       title = &amp;quot;Signatories of the Revoke Article 50 Petition&amp;quot;, 
       subtitle = &amp;quot;Let&#39;s investigate where the signatures come from&amp;quot;, 
       caption = &amp;quot;Geometries: ONS Open Geography Portal; Data: UK Parliament and Government&amp;quot;)

by_quantile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://www.glynmottershead.com/tutorial/2019-04-01-mapping-the-article-50-petition-in-r-and-ggplot-part-2_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The next thing we can try is adding a theme. I&amp;rsquo;m just going to use the one from Timo&amp;rsquo;s post but change the font family. It is being stored as a function, so we can call it easily.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;theme_map &amp;lt;- function(...) {
  theme_minimal() +
    theme(
      text = element_text(family = &amp;quot;Helvetica&amp;quot;, color = &amp;quot;#22211d&amp;quot;),
      axis.line = element_blank(),
      axis.text.x = element_blank(),
      axis.text.y = element_blank(),
      axis.ticks = element_blank(),
      axis.title.x = element_blank(),
      axis.title.y = element_blank(),
      # panel.grid.minor = element_line(color = &amp;quot;#ebebe5&amp;quot;, size = 0.2),
      panel.grid.major = element_line(color = &amp;quot;#ebebe5&amp;quot;, size = 0.2),
      panel.grid.minor = element_blank(),
      plot.background = element_rect(fill = &amp;quot;#f5f5f2&amp;quot;, color = NA), 
      panel.background = element_rect(fill = &amp;quot;#f5f5f2&amp;quot;, color = NA), 
      legend.background = element_rect(fill = &amp;quot;#f5f5f2&amp;quot;, color = NA),
      panel.border = element_blank(),
      ...
    )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this time we&amp;rsquo;ll use the theme as part of our final version. We&amp;rsquo;re also going to pull a little trick in the title - remember we saved the number of votes in total earlier on as &lt;code&gt;total_sig&lt;/code&gt;? We can use the &lt;code&gt;paste0()&lt;/code&gt; function to put the number in the text, with the added advantage that the number will automatically update from the API when we run all the code again.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;by_quantile2 &amp;lt;- ggplot() +
  geom_polygon(data = full_uk_map, aes(x = long, y = lat, group = group, fill = quantiles)) +
  geom_path(color = &amp;quot;black&amp;quot;, size = 0.1) +
  scale_fill_brewer(type = &amp;quot;qual&amp;quot;, palette = &amp;quot;Blues&amp;quot;, guide = &amp;quot;legend&amp;quot;, name = &amp;quot;Signature\nCount&amp;quot;, labels = labels) +
  theme_void() +
  coord_equal() +
  theme_map() +
  theme(legend.position = &amp;quot;bottom&amp;quot;) +
  labs(x = NULL, 
       y = NULL, 
       title = &amp;quot;Signatories of the Revoke Article 50 Petition&amp;quot;, 
       subtitle = paste0(&amp;quot;Let&#39;s investigate where the &amp;quot;, format(total_sig, big.mark = &amp;quot;,&amp;quot;), &amp;quot; signatures come from&amp;quot;), 
       caption = &amp;quot;Geometries: ONS Open Geography Portal; Data: UK Parliament and Government&amp;quot;)

by_quantile2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://www.glynmottershead.com/tutorial/2019-04-01-mapping-the-article-50-petition-in-r-and-ggplot-part-2_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At some stage I&amp;rsquo;m going to play around with the background to declare the plot size (I&amp;rsquo;m guessing that is why it is breaking the bounds here - but the version at the top is exported from the code run in RStudio), I&amp;rsquo;ll post when I do but for now I&amp;rsquo;m going to stop here.&lt;/p&gt;

&lt;p&gt;Remember, Timo goes on much further to make &lt;a href=&#34;https://timogrossenbacher.ch/2016/12/beautiful-thematic-maps-with-ggplot2-only/#clear-workspace-and-install-necessary-packages&#34;&gt;a really beautiful map&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mapping the article 50 petition in R and ggplot</title>
      <link>https://www.glynmottershead.com/tutorial/mapping-the-article-50-petition-in-r-and-ggplot/</link>
      <pubDate>Fri, 29 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.glynmottershead.com/tutorial/mapping-the-article-50-petition-in-r-and-ggplot/</guid>
      <description>

&lt;h1 id=&#34;mapping-in-r-using-ggplot2&#34;&gt;Mapping in R - using ggplot2&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&#34;https://petition.parliament.uk/petitions/241584/&#34;&gt;Revoke Article 50 petition&lt;/a&gt; got my colleague and all-round codemeister &lt;a href=&#34;https://twitter.com/martinjc&#34;&gt;Dr Martin Chorley&lt;/a&gt; and I talking.&lt;/p&gt;

&lt;p&gt;We started thinking about ways that we could see what the patterns for people signing were like.&lt;/p&gt;

&lt;p&gt;It was well into the millions when I started playing with ways of visualising where people who voted were located. The site can map all of the signatures (5,962,824 at the time of writing), but it also has an option to get the data in a &lt;a href=&#34;https://petition.parliament.uk/petitions/241584.json&#34;&gt;machine-friendly json format&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;According to the site:&lt;br /&gt;
&lt;em&gt;The data shows the number of people who have signed the petition by country as well as in the constituency of each Member of Parliament. This data is available for all petitions on the site. It is not a list of people who have signed the petition. The only name that is shared on the site is that of the petition creator.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ll need to install the following packages:
&lt;code&gt;install.packages(c(&amp;quot;geojsonio&amp;quot;, &amp;quot;ggplot2&amp;quot;, &amp;quot;dplyr&amp;quot;, &amp;quot;jsonlite&amp;quot;))&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;getting-the-map-shapes&#34;&gt;Getting the map shapes&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re going to use &lt;em&gt;geojsonio&lt;/em&gt; first to get a mapping file from the &lt;a href=&#34;http://geoportal.statistics.gov.uk/&#34;&gt;ONS Open Geography Portal&lt;/a&gt;. It has a great repository of mapping files. We&amp;rsquo;ll be using the parliamentary wards file. Go to the site and use the menu bar to:
&lt;em&gt;Boundaries &amp;gt; Electoral Boundaries &amp;gt; Westminster Parliamentary Constituencies &amp;gt; 2017 Boundaries&lt;/em&gt;&lt;br /&gt;
You can download the file in a variety of formats, but we&amp;rsquo;re going to use the API to import it directly in GeoJSON format.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NB At the time of writing there appeared to be a glitch in the site, I actually found the right map home page via a search engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First we use the &lt;code&gt;library()&lt;/code&gt; function to call geojsonio to handle the file, we&amp;rsquo;ll store the URL as a variable and then read it in to our working environment. The &amp;lsquo;what&amp;rsquo; argument uses &amp;ldquo;sp&amp;rdquo; - spacial class for a mapping file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(geojsonio)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &#39;geojsonio&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## The following object is masked from &#39;package:base&#39;:
## 
##     pretty
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;url &amp;lt;- &amp;quot;https://opendata.arcgis.com/datasets/5ce27b980ffb43c39b012c2ebeab92c0_2.geojson&amp;quot;

uk_map &amp;lt;- geojson_read(url, what = &amp;quot;sp&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We then need to turn it from the form it is in to something we can map more easily in ggplot2, so we&amp;rsquo;ll call the library here and use the &lt;code&gt;fortify()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;By having a look in side the uk_map dataframe we can see our code names for the constituencies are stored in &lt;strong&gt;pcon17cd&lt;/strong&gt;, so we&amp;rsquo;ll add that as our region.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggplot2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Registered S3 method overwritten by &#39;dplyr&#39;:
##   method         from     
##   print.location geojsonio
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;fort_uk_map &amp;lt;- fortify(uk_map, region = &amp;quot;pcon17cd&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;getting-the-data-for-our-map&#34;&gt;Getting the data for our map&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re now going to read in the data from the Parliament Petitions site. We&amp;rsquo;ll use &lt;strong&gt;jsonlite&lt;/strong&gt; to do that.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(jsonlite)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &#39;jsonlite&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## The following object is masked from &#39;package:geojsonio&#39;:
## 
##     validate
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;json_data &amp;lt;- fromJSON(&amp;quot;https://petition.parliament.uk/petitions/241584.json&amp;quot;, flatten = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next thing we need to do is get the data out of the json file we just imported. If you click on the json_data object in the Environment pane, you&amp;rsquo;ll see it is a list of two - double click to open it up and we cab view the file.  Inside the json-data structure we can see data has a list of three objects inside it, opening that shows us attributes is where the interesting things are happening.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a lot going on but there are two things that interest me for mapping - signatures_by_constituency and signatures_by_country (this second one is for a later date).&lt;/p&gt;

&lt;p&gt;Opening the signatures_by_country list shows it has the following elements &lt;strong&gt;name, ons_code, mp, signature_count&lt;/strong&gt; for each of the 650 constituencies in the file.  The ons_code will come in useful later when we want to merge our map and data together.&lt;/p&gt;

&lt;p&gt;We can move through the levels of our json_data object  in this fashion &lt;code&gt;name$parent_element$child_element&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So in our case:
&lt;code&gt;sign_data &amp;lt;- json_data$data$attributes$signatures_by_constituency&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll store that in a dataframe and while we&amp;rsquo;re at it we&amp;rsquo;ll calculate how many signatures there were at the time of running the code, I&amp;rsquo;ll do this as a dataframe as it will be useful in the second tutorial.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sign_data &amp;lt;- json_data$data$attributes$signatures_by_constituency


total_sig &amp;lt;- sum(sign_data$signature_count)

total_sig
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 5728352
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;joining-the-data-sets&#34;&gt;Joining the data sets&lt;/h2&gt;

&lt;p&gt;This is where &lt;strong&gt;dplyr&lt;/strong&gt; comes into its own as a data-wrangling toolkit. We&amp;rsquo;ll call the library and then use a &lt;code&gt;left_join()&lt;/code&gt; to merge them together into a new dataframe called &lt;strong&gt;full_uk_map&lt;/strong&gt;. There&amp;rsquo;s an explanation of join types on the &lt;a href=&#34;https://dplyr.tidyverse.org/reference/join.html&#34;&gt;tidyverse site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To do the join we have to tell the function where our common columns are in the &amp;lsquo;by&amp;rsquo; element &amp;ndash; &lt;code&gt;left_join(dataset1, dataset2, by = c(&amp;quot;a_column&amp;quot; = &amp;quot;the_equivalent_column&amp;quot;))&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(dplyr)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &#39;dplyr&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## The following objects are masked from &#39;package:stats&#39;:
## 
##     filter, lag
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## The following objects are masked from &#39;package:base&#39;:
## 
##     intersect, setdiff, setequal, union
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;full_uk_map &amp;lt;- left_join(fort_uk_map, sign_data, by = c(&amp;quot;id&amp;quot; = &amp;quot;ons_code&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;basic-ggplot2-map&#34;&gt;Basic ggplot2 map&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ll start off with a simple map that shows which constituency people are signing from, so we need to load ggplot2 as a function. I&amp;rsquo;ll break down the structure below for what we are doing here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Call ggplot here as a function and use the &#39;+&#39; symbol to denote &#39;and then&#39;
ggplot() +
  # We&#39;ll use geom_polygon() and tell it where the data is, what our aesthetics are and what to fill how to create it as a choropleth map.
  geom_polygon(data = full_uk_map, aes(x = long, y = lat, group = group, fill = signature_count)) +
  # We&#39;ll put a white stroke on the constituency boundaries
  geom_path(color = &amp;quot;white&amp;quot;) +
  # Get rid of the background
  theme_void() +
  # And finally let&#39;s use coord_equal to ensure the x and y scales are the same.
  coord_equal()
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://www.glynmottershead.com/tutorial/2019-03-29-mapping-the-article-50-petition-in-r-and-ggplot_files/figure-html/map-1.png&#34; alt=&#34;A simple choropleth map.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Figure 1: A simple choropleth map.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve also been playing with a great post from Timo Grossenbaher on how to &lt;a href=&#34;https://timogrossenbacher.ch/2016/12/beautiful-thematic-maps-with-ggplot2-only/&#34;&gt;make beatiful thematic maps with ggplot2&lt;/a&gt; to create something a bit more effective.&lt;/p&gt;

&lt;p&gt;Now pop along to &lt;a href=&#34;https://www.glynmottershead.com/tutorial/mapping-the-article-50-petition-in-r-and-ggplot-part-2/&#34;&gt;stage two of this tutorial&lt;/a&gt; which goes further and looks at making things more interesting.&lt;/p&gt;

&lt;h2 id=&#34;more-analysis&#34;&gt;More analysis&lt;/h2&gt;

&lt;p&gt;Andy Dickinson from Manchester Met has done a &lt;a href=&#34;https://andydickinson.net/2019/03/27/quick-analalysis-of-petitions-data&#34;&gt;Pandas (Python) look at the article 50 and knife crime petitions&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>When a tech company pulls the plug on your story</title>
      <link>https://www.glynmottershead.com/publication/nieman-predictions-2019/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.glynmottershead.com/publication/nieman-predictions-2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Are You Talking To Me?: An Analysis of Journalism Conversation on Social Media</title>
      <link>https://www.glynmottershead.com/publication/are-you-talking-book-chapter/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0100</pubDate>
      
      <guid>https://www.glynmottershead.com/publication/are-you-talking-book-chapter/</guid>
      <description></description>
    </item>
    
    <item>
      <title>&#39;Can I click it? Yes you can&#39;: Football journalism, Twitter and clickbait</title>
      <link>https://www.glynmottershead.com/publication/can-i-click-it/</link>
      <pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.glynmottershead.com/publication/can-i-click-it/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Recoding journalism  education: mind the  skills gap, please!</title>
      <link>https://www.glynmottershead.com/talk/gap_foj/</link>
      <pubDate>Sat, 02 Sep 2017 00:00:00 +0100</pubDate>
      
      <guid>https://www.glynmottershead.com/talk/gap_foj/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The First Commit of History: Visualising News on a Deadline</title>
      <link>https://www.glynmottershead.com/talk/visualising-on-a-deadline/</link>
      <pubDate>Wed, 12 Jul 2017 00:00:00 +0100</pubDate>
      
      <guid>https://www.glynmottershead.com/talk/visualising-on-a-deadline/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Now we are three: A perspective on Computational and Data Journalism Education</title>
      <link>https://www.glynmottershead.com/talk/now-we-are-three/</link>
      <pubDate>Thu, 06 Jul 2017 00:00:00 +0100</pubDate>
      
      <guid>https://www.glynmottershead.com/talk/now-we-are-three/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Are You Talking To Me?: An Analysis of Journalism Conversation on Social Media</title>
      <link>https://www.glynmottershead.com/publication/are-you-talking-to-me/</link>
      <pubDate>Sun, 02 Oct 2016 00:00:00 +0100</pubDate>
      
      <guid>https://www.glynmottershead.com/publication/are-you-talking-to-me/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Subediting and production for journalists</title>
      <link>https://www.glynmottershead.com/publication/subbing-book/</link>
      <pubDate>Fri, 28 Aug 2015 00:00:00 +0100</pubDate>
      
      <guid>https://www.glynmottershead.com/publication/subbing-book/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
